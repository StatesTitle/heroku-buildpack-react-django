#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

########################################
# Begin part copied from heroku/nodejs #
########################################

indent() {
  while IFS= read -r LINE;
  do
    echo "       $LINE"
  done
}

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

# This is used by the buildpack stdlib for metrics
# shellcheck disable=SC2034
BPLOG_PREFIX="buildpack.nodejs"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)


####### some of my own code, not copied from heroku/nodejs

# TODO: change this from hardcoding lender_onboarding_ui to searching all the $folders for a package.json and then
#  running install & build if one is found
if [ -d "$BUILD_DIR/lender_onboarding_ui" ] || [ -d "$BUILD_DIR/integration_admin_ui" ] || [ -d "$BUILD_DIR/instant_order_app" ]; then
    echo "Project/s found to run yarn install and yarn build." | indent

####### end my own code. back to heroku/nodejs

# shellcheck source=lib/stdlib.sh
source "$BP_DIR/lib/stdlib.sh"
# shellcheck source=lib/output.sh
source "$BP_DIR/lib/output.sh"
## shellcheck source=lib/monitor.sh
#source "$BP_DIR/lib/monitor.sh"
# shellcheck source=lib/environment.sh
source "$BP_DIR/lib/environment.sh"
# shellcheck source=lib/failure.sh
source "$BP_DIR/lib/failure.sh"
# shellcheck source=lib/binaries.sh
source "$BP_DIR/lib/binaries.sh"
# shellcheck source=lib/json.sh
source "$BP_DIR/lib/json.sh"
## shellcheck source=lib/cache.sh
#source "$BP_DIR/lib/cache.sh"
## shellcheck source=lib/dependencies.sh
#source "$BP_DIR/lib/dependencies.sh"
## shellcheck source=lib/plugin.sh
#source "$BP_DIR/lib/plugin.sh"
## shellcheck source=lib/uuid.sh
#source "$BP_DIR/lib/uuid.sh"
## shellcheck source=lib/kvstore.sh
#source "$BP_DIR/lib/kvstore.sh"
## shellcheck source=lib/metadata.sh
#source "$BP_DIR/lib/metadata.sh"
## shellcheck source=lib/features.sh
#source "$BP_DIR/lib/features.sh"
## shellcheck source=lib/builddata.sh
#source "$BP_DIR/lib/builddata.sh"

export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/yarn/bin":$PATH

LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment" | output "$LOG_FILE"

mkdir -p "$BUILD_DIR/.heroku/node/"
cd "$BUILD_DIR"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"
create_build_env

install_nodejs "$BUILD_DIR/.heroku/node" "$BUILD_DIR"
install_yarn "$BUILD_DIR/.heroku/yarn" "$BUILD_DIR"

######################################
# End part copied from heroku/nodejs #
######################################

  if [ -e "$BUILD_DIR/package.json" ]; then
    yarn install
    yarn --cwd "$BUILD_DIR/ts_shared/context" build
    yarn --cwd "$BUILD_DIR/ts_shared/logger" build
    yarn --cwd "$BUILD_DIR/ts_shared/components" build
    yarn --cwd "$BUILD_DIR/lender_onboarding_ui" build
    yarn --cwd "$BUILD_DIR/integration_admin_ui" build
    yarn --cwd "$BUILD_DIR/instant_order_app" build
  fi

  # clear out the node_modules now that the build is finished
  # since everything that was built is now static files
  find "$BUILD_DIR" -type d -name node_modules -prune -exec rm -rf {} \;

else
  echo "No project found. Skipping yarn install and yarn build." | indent
fi

exit 0
